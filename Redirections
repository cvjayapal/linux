There are 3 types of redirections will go one by one:
1) Output Redirection 2)Input redirection 3) Error Redirection

Output Redirection:  The '>' symbol is used for output (STDOUT) redirection.

Command: ls -al > listings ## in this example instead of showing the out put on the standard output(console or screen) we are redirecting or storing 
information in the file called listings, if the file listings is not there it is going to create.

In order to see the output we need to read or access the file called listings, as shown in below.
Command: cat listings


Input redirection: The '<' symbol is used for input(STDIN) redirection


Many commands can accept input from a facility called standard input.
By default, standard input gets its contents from the keyboard, but like standard output, it also can be redirected. 
To redirect standard input from a file instead of the keyboard, the "<" character is used like this:

Command:  sort < file_list.txt ## it is same as sort file_list.txt
Command: head < file4 
Command: tail < file5
Command: wc -l < users

Error Redirection: Whenever you execute a program/command at the terminal, 3 files are always open, viz., s
tandard input, standard output, standard error.

These files are always present whenever a program is run. As explained before a file descriptor, is associated with each of these files.

File                  	File Descriptor
Standard Input STDIN	    0
Standard Output STDOUT	  1
Standard Error STDERR	   2

By default, error stream is displayed on the screen. Error redirection is routing the errors to a file other than the screen.

Why Error Redirection?
Error re-direction is one of the very popular features of Unix/Linux.

Frequent UNIX users will reckon that many commands give you massive amounts of errors.

For instance, while searching for files, one typically gets permission denied errors. These errors usually do not help the person searching for a particular file.
While executing shell scripts, you often do NOT want error messages cluttering up the normal program output.
The solution is to re-direct the error messages to a file.

 Command: myprogram 2>errorsfile
 
 
 Server Administrators frequently, list directories and store both error and standard output into a file,
 which can be processed later. Here is the command.
 
 Command: ls Documents ABC> dirlist 2>&1
 
 Here,

which writes the output from one file to the input of another file. 2>&1 means that STDERR redirects to the target of STDOUT (which is the file dirlist)
We are redirecting error output to standard output which in turn is being re-directed to file dirlist. Hence, both the output is written to file dirlist


Summary: Each file in Linux has a corresponding File Descriptor associated with it
The keyboard is the standard input device while your screen is the standard output device
">" is the output redirection operator. ">>" appends output to an existing file
"<" is the input redirection operator
">&"re-directs output of one file to another.
You can re-direct error using its corresponding File Descriptor 2.




