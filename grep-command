Grep: 

 create a file:
Command: cat demo_file

THIS LINE IS THE 1ST UPPER CASE LINE IN THIS FILE.
this line is the 1st lower case line in this file.
This Line Has All Its First Character Of The Word With Upper Case.

Two lines above this line is empty.
And this is the last line.
==================================
The above created file is the reference to all the commands below.

1. Search for the given string in a single file:
The basic usage of grep command is to search for a specific string in the specified file as shown below.

Syntax:
grep "literal_string" filename

command:  grep "this" demo_file
Output:
this line is the 1st lower case line in this file.
Two lines above this line is empty.
And this is the last line.

2.Checking for the given string in multiple files.:
Syntax:
grep "string" FILE_PATTERN
This is also a basic usage of grep command. For this example, let us copy the demo_file to demo_file1. 
The grep output will also include the file name in front of the line that matched the specific pattern as shown below. 
When the Linux shell sees the meta character, it does the expansion and gives all the files as input to grep.

Command: cp demo_file demo_file1
Command: grep "this" demo_*
Output: 
demo_file:this line is the 1st lower case line in this file.
demo_file:Two lines above this line is empty.
demo_file:And this is the last line.
demo_file1:this line is the 1st lower case line in this file.
demo_file1:Two lines above this line is empty.
demo_file1:And this is the last line.

3) Case insensitive search using grep -i
Syntax:
grep -i "string" FILE

This is also a basic usage of the grep. This searches for the given string/pattern case insensitively. 
So it matches all the words such as “the”, “THE” and “The” case insensitively as shown below.

Command: $ grep -i "the" demo_file
Output:THIS LINE IS THE 1ST UPPER CASE LINE IN THIS FILE.
this line is the 1st lower case line in this file.
This Line Has All Its First Character Of The Word With Upper Case.
And this is the last line.

4)  Match regular expression in files:
Syntax:
grep "REGEX" filename

This is a very powerful feature, if you can use use regular expression effectively.
In the following example, it searches for all the pattern that starts with “lines” and ends with “empty” with anything in-between.
i.e To search “lines[anything in-between]empty” in the demo_file.

$ grep "lines.*empty" demo_file
Two lines above this line is empty.
From documentation of grep: A regular expression may be followed by one of several repetition operators:

? The preceding item is optional and matched at most once.
* The preceding item will be matched zero or more times.
+ The preceding item will be matched one or more times.
{n} The preceding item is matched exactly n times.
{n,} The preceding item is matched n or more times.
{,m} The preceding item is matched at most m times.
{n,m} The preceding item is matched at least n times, but not more than m times.

5) Display N lines after match:-A is the option which prints the specified N lines after the match as shown below.
Syntax:
grep -A <N> "string" FILENAME

Command: grep -A 3 -i "example" demo_text ##grep the word example in file if found frome ther print three lines.

6) Display N lines before match: -B is the option which prints the specified N lines before the match.

Syntax:
grep -B <N> "string" FILENAME

command: grep -B 2 "single WORD" demo_text ## grep word called  single WORD if found display above two lines.

7) Invert match using grep -v: 
Syntax:
grep -v -e "pattern" -e "pattern"
